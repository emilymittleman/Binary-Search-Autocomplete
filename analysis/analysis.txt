/*
    author: Emily Mittleman
    netID: elm66
*/

1. BenchmarkForAutocomplete results

    threeletterwords.txt results:
        init time: 0.004371	for BruteAutocomplete
        init time: 0.004921	for BinarySearchAutocomplete
        init time: 0.07726	for HashListAutocomplete
        search	size  #match	BruteAutoc	BinarySear	HashListAu
        	    17576	50	    0.00321492	0.00446226	0.00027892
        	    17576	50	    0.00050962	0.00182231	0.00000531
        a	    676	    50	    0.00042584	0.00014295	0.00000554
        a	    676	    50	    0.00063163	0.00022210	0.00002965
        b	    676	    50	    0.00030750	0.00018433	0.00000465
        c	    676	    50	    0.00028994	0.00012967	0.00000485
        g	    676	    50	    0.00024792	0.00014171	0.00000510
        ga	    26	    50	    0.00026632	0.00003847	0.00000516
        go	    26	    50	    0.00029202	0.00004360	0.00000475
        gu	    26	    50	    0.00101916	0.00024445	0.00005601
        x	    676	    50	    0.00159304	0.00019241	0.00001345
        y	    676	    50	    0.00035287	0.00014782	0.00000697
        z	    676	    50	    0.00017672	0.00012269	0.00000584
        aa	    26	    50	    0.00035353	0.00005340	0.00000520
        az	    26	    50	    0.00022345	0.00004152	0.00000626
        za	    26	    50	    0.00009495	0.00002685	0.00000465
        zz	    26	    50	    0.00014250	0.00002525	0.00000437
        zqzqwwx	0	    50	    0.00021077	0.00003326	0.00000235
        size in bytes=246064	 for BruteAutocomplete
        size in bytes=246064	 for BinarySearchAutocomplete
        size in bytes=1092468	 for HashListAutocomplete
    fourletterwords.txt results:
        init time: 0.05454	for BruteAutocomplete
        init time: 0.02249	for BinarySearchAutocomplete
        init time: 0.8476	for HashListAutocomplete
        search	size  #match	BruteAutoc	BinarySear	HashListAu
        	    456976	50	    0.01181686	0.01936207	0.00028390
        	    456976	50	    0.00690118	0.00286162	0.00000591
        a	    17576	50	    0.00775961	0.00019173	0.00000574
        a	    17576	50	    0.00692323	0.00017422	0.00000594
        b	    17576	50	    0.01249970	0.00033552	0.00002583
        c	    17576	50	    0.00469376	0.00019959	0.00000688
        g	    17576	50	    0.00580163	0.00026089	0.00000859
        ga	    676	    50	    0.00517010	0.00012584	0.00000900
        go	    676	    50	    0.00465058	0.00006211	0.00000737
        gu	    676	    50	    0.00419425	0.00005783	0.00000637
        x	    17576	50	    0.00492456	0.00022091	0.00000774
        y	    17576	50	    0.00447201	0.00018314	0.00000636
        z	    17576	50	    0.00455736	0.00018453	0.00000690
        aa	    676	    50	    0.00509233	0.00007613	0.00000735
        az	    676	    50	    0.00479225	0.00006969	0.00000733
        za	    676	    50	    0.00438281	0.00005500	0.00000646
        zz	    676	    50	    0.00681047	0.00006640	0.00000824
        zqzqwwx	0	    50	    0.00395800	0.00006914	0.00000379
        size in bytes=7311616	 for BruteAutocomplete
        size in bytes=7311616	 for BinarySearchAutocomplete
        size in bytes=40322100	 for HashListAutocomplete
    alexa.txt results:
        init time: 0.4027	for BruteAutocomplete
        init time: 1.462	for BinarySearchAutocomplete
        init time: 6.038	for HashListAutocomplete
        search	size  #match	BruteAutoc	BinarySear	HashListAu
        	    1000000	50	    0.02375638	0.02374150	0.00028144
        	    1000000	50	    0.01349950	0.00605232	0.00000764
        a	    69464	50	    0.01444910	0.00062224	0.00000758
        a	    69464	50	    0.02287402	0.00109498	0.00001095
        b	    56037	50	    0.01453241	0.00051097	0.00000831
        c	    65842	50	    0.01109458	0.00049449	0.00000630
        g	    37792	50	    0.01042649	0.00037774	0.00000738
        ga	    6664	50	    0.01173834	0.00018610	0.00000830
        go	    6953	50	    0.01090950	0.00015333	0.00000741
        gu	    2782	50	    0.01772291	0.00013550	0.00000837
        x	    6717	50	    0.04510009	0.00018463	0.00000975
        y	    16765	50	    0.01023409	0.00018967	0.00000705
        z	    8780	50	    0.01117307	0.00050459	0.00003087
        aa	    718	    50	    0.01199693	0.00007500	0.00001406
        az	    889	    50	    0.02242833	0.00009427	0.00000844
        za	    1718	50	    0.01013564	0.00009868	0.00000695
        zz	    162 	50	    0.02899495	0.00006811	0.00000845
        zqzqwwx	0	    50	    0.01160722	0.00009468	0.00000368
        size in bytes=38204230	 for BruteAutocomplete
        size in bytes=38204230	 for BinarySearchAutocomplete
        size in bytes=475893648	 for HashListAutocomplete

2. BenchmarkForAutocomplete results for alexa.txt with #matches = 10000:
        init time: 0.4272	for BruteAutocomplete
        init time: 1.565	for BinarySearchAutocomplete
        init time: 6.282	for HashListAutocomplete
        search	size	#match	BruteAutoc	BinarySear	HashListAu
        	    1000000	10000	0.02722082	0.07692812	0.00028085
        	    1000000	10000	0.01833345	0.04144650	0.00000891
        a	    69464	10000	0.02148236	0.01623195	0.00000861
        a	    69464	10000	0.01732591	0.01608644	0.00000726
        b	    56037	10000	0.01777916	0.01573415	0.00000754
        c	    65842	10000	0.01868683	0.01673619	0.00000776
        g	    37792	10000	0.01702636	0.01168842	0.00000699
        ga  	6664	10000	0.01661799	0.00340879	0.00000819
        go	    6953	10000	0.01870544	0.00347786	0.00000794
        gu	    2782	10000	0.01269047	0.00122547	0.00000776
        x	    6717	10000	0.01478089	0.00336053	0.00000848
        y	    16765	10000	0.02977273	0.01266919	0.00001248
        z	    8780	10000	0.03748168	0.00564982	0.00000996
        aa	    718	    10000	0.01145293	0.00028723	0.00001325
        az	    889	    10000	0.03391327	0.00049254	0.00001857
        za	    1718	10000	0.01122085	0.00070630	0.00000784
        zz	    162	    10000	0.01042075	0.00007228	0.00000670
        zqzqwwx	0	    10000	0.02127455	0.00011959	0.00000410
        size in bytes=38204230	 for BruteAutocomplete
        size in bytes=38204230	 for BinarySearchAutocomplete
        size in bytes=475893648	 for HashListAutocomplete

    Trial 2:
        init time: 0.3937	for BruteAutocomplete
        init time: 1.172	for BinarySearchAutocomplete
        init time: 5.007	for HashListAutocomplete
    Trial 3:
        init time: 0.2768	for BruteAutocomplete
        init time: 1.203	for BinarySearchAutocomplete
        init time: 4.894	for HashListAutocomplete
    Trial 4:
        init time: 0.2625	for BruteAutocomplete
        init time: 1.445	for BinarySearchAutocomplete
        init time: 5.009	for HashListAutocomplete

    The number of matches does not significantly effect the runtime. I ran the
    benchmark 4 times in total: for the first trial, times increased slightly
    (about 0.2 seconds) for the 3 different autocomplete methods when using a larger
    number for total matches. For the second trial, times decreased by about 0.5
    seconds on average, then for the third trial times decreased by about 0.2 seconds,
    and for the fourth trial times were again very similar to the first trial with only
    50 matches. Overall, the multiple trials running the same program with the same # matches
    show that each time, the times vary slightly no matter what, so the small difference
    we see between the trial with 50 matches and the trial with 10,000 matches is insignificant.

3.  BruteAutocomplete.topMatches uses a LinkedList rather than an ArrayList because
    it is more efficient when adding elements to the front of the list. The operation
    LinkedList.addFirst(value) has constant time, so it's Big-Oh notation is O(1), since
    all it does is say that 'value' is now the first node and it points to the rest of the
    list, so this is a constant time operation. When ArrayLists have to insert an element
    into the front of the list, it is a lot less efficient because it has to shift the
    index of every single other element in the list, so ArrayList.add(0, value) is a linear
    time operation, so its Big-Oh notation is O(N).
    The PriorityQueue uses Comparator.comparing(Term::getWeight) because in the last loop
    when you are removing the elements from the priority queue, it removes the elements
    with the lowest weights first and then adds them to the front of the LinkedList. It uses
    Comparator.comparing(Term::getWeight) rather than getWeight.reverse because you want to
    be able to remove the element with the lowest weight first, so that when you put it in
    the front of the LinkedList, the list ends up being in order from greatest to least.

4.  HashListAutocomplete uses more memory than the other two implementations because it
    makes a HashMap of all possible prefixes / words that the user can start to enter, so
    it's efficient to look up what prefix the user is typing in, but it has to store way
    more data than the other implementations. The other implementations just use the prefix
    that the user is currently typing in, so they take more time to make the list of possible
    options that could complete the user's word or sentence, but they uses less storage.











